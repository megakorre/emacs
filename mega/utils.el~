(defalias 'first 'car)
(defalias 'rest  'cdr)

(defconst ruby-block-beg-re
  "class\\|module\\|def\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin\\|do"
  )

(defconst ruby-non-block-do-re
  "\\(while\\|until\\|for\\|rescue\\)\\>"
  )

(defconst ruby-indent-beg-re
  "\\(\\s *\\(class\\|module\\|def\\)\\)\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin"
  )

(defconst ruby-modifier-beg-re
  "if\\|unless\\|while\\|until"
  )

(defconst ruby-modifier-re
  (concat ruby-modifier-beg-re "\\|rescue")
  )

(defconst ruby-block-mid-re
  "then\\|else\\|elsif\\|when\\|rescue\\|ensure"
  )

(defconst ruby-block-op-re
  "and\\|or\\|not"
  )


(defconst ruby-block-hanging-re
  (concat ruby-modifier-beg-re "\\|" ruby-block-op-re)
  )

(defconst ruby-block-end-re "end")

(defun force-save-buffer ()
  "Save the buffer even if it is not modified."
  (interactive)
  (set-buffer-modified-p t)
  (delete-trailing-whitespace)
  (save-buffer))

(defun sync-packages ()
  "Synchronize packages"
  (interactive)
  (el-get 'sync '(el-get package))
  (setq my-packages (mapcar 'el-get-source-name el-get-sources))
  (el-get 'sync my-packages))

(defun el-get-init ()
  (if (require 'el-get nil t)
      (sync-packages)
    (url-retrieve
     "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
     (lambda (s)
       (end-of-buffer)
       (eval-print-last-sexp)
       (setq el-get-verbose t)
       (sync-packages)))))

(defun el-get-packages (&rest packages)
  (package-initialize)
  (setq el-get-sources packages)
  (el-get-init)
  (package-initialize))

(defun in-modes? (modes)
  (-contains? modes major-mode))

(defun global-set-keys (&rest values)
  (-> (-partition 2 values)
    (--each (global-set-key (kbd (car it)) (car (cdr it))))))

(defun move-to-begining-of-code ()
  (interactive)
  (move-beginning-of-line 1)
  (indent-according-to-mode))

(defun insert-and-indent-after ()
  (interactive)
  (message "inserting line after")
  (move-end-of-line 1)
  (newline)
  (indent-according-to-mode))

(defun insert-and-indent-before ()
  (interactive)
  (message "inserting line before")
  (previous-line)
  (move-end-of-line 1)
  (newline)
  (indent-according-to-mode))

(defun m-indent-buffer ()
  (interactive)
  (message "indenting all buffer")
  (puggle-indent-buffer))

;; -------------------------------------------------------------------------------------

(defun slurp (path)
  (with-temp-buffer
    (insert-file-contents path)
    (buffer-string)))

(defun alist->plist (alist)
  (-flatten (--map
	     (list (m/symbol->keyword (car it)) (cdr it))
	     alist)))

(defun m/keys (plist)
  (->> plist
    (-partition 2)
    (-map 'first)))

(defun m/vals (plist)
  (->> plist
    (-partition 2)
    (-map 'second)))

(defalias 'm/get 'plist-get)

(defun m/merge (plist-a &rest plist-b)
  (-reduce-from
   (lambda (plist-a plist-b)
     (->> (-partition 2 plist-b)
       (--reduce-from
	(let ((key (first it))
	      (val (second it)))
	  (plist-put acc key val))
	plist-a)))
   plist-a
   plist-b))

(defun m/p (&rest args)
  args)

(defun m/dissoc (plist key)
  (-flatten
   (--reject (eq (first it) key) (-partition 2 plist))))

(defun m/assoc (plist &rest pairs)
  (m/merge plist pairs))

(defun m/update-in (plist index f &rest args)
  (let ((key (first index)))
    (if (eq 1 (length index))
	(m/assoc plist key (apply f (m/get plist key) args))
      (m/assoc plist key (apply 'm/update-in (m/get plist key) (rest index) f args)))))

(defun m/merge-with (f plist-a plist-b)
  (-reduce-from
   (lambda (accu input-pair)
     (let* ((key (first input-pair))
	    (old-val (plist-get accu key))
	    (new-val
	     (if old-val
		 (funcall f old-val (second input-pair))
	       (second input-pair))))
       (plist-put accu key new-val)))
   plist-a
   (-partition 2 plist-b)))

(defun m/assoc-in (plist index &rest keyvals)
  (m/update-in plist index 'm/merge keyvals))

(defun m/map-vals (f plist)
  (->> (-partition 2 plist)
    (-map (lambda (pair)
	    (list (first pair) (funcall f (second pair)))))
    (-flatten)))

(defun m/keyword->symbol (keyword)
  (intern (substring (symbol-name keyword) 1)))

(defun m/symbol->keyword (symbol)
  (intern (concat ":" (symbol-name symbol))))

(defun m/key-lookup-pair (keys map-name)
  (-map
   (lambda (key)
     `(,key (m/get ,map-name ,(m/symbol->keyword key))))
   keys))

(defmacro m/letm (form &rest code)
  ""
  (declare (indent defun))
  (let* ((map (gensym))
	 (keys (first form))
	 (val-exp (second form))
	 (remaining (rest (rest form)))
	 (next-code
	  (if (null remaining)
	      `(progn .,code)
	    `(m/letm ,remaining .,code))))
    `(let* ((,map ,val-exp)
	    .,(m/key-lookup-pair keys map))
       ,next-code)))

(defvar m/keywords-added nil)
(unless m/keywords-added
  (font-lock-add-keywords
   'emacs-lisp-mode
   `((,(concat "(\\s-*" (regexp-opt '("m/letm" "m/defm" "m/defk") 'paren) "\\>")
      1 font-lock-keyword-face)) 'append)

  (font-lock-refresh-defaults)
  (setq m/keywords-added t))

(defmacro m/defm
  (name bindings &rest code)
  ""
  (declare (indent defun))
  (let ((map-arg (gensym)))
    `(defun ,name (,map-arg)
       (m/letm (,bindings ,map-arg)
	 .,code))))

(defmacro m/defk
  (name bindings &rest code)
  ""
  (declare (indent defun))
  (let ((map-arg (gensym)))
    `(defun ,name (&rest ,map-arg)
       (m/letm (,bindings ,map-arg)
	 .,code))))
